{"version":3,"sources":["DragDrop.js","SortPanel.js","Item.js","helper.js","App.js","serviceWorker.js","index.js"],"names":["loadJsonFile","file","Promise","resolve","reader","FileReader","onload","json","result","JSON","parse","ignore","readAsText","DragDrop","onDragOver","e","stopPropagation","preventDefault","dataTransfer","dropEffect","onChange","_callee","files","regenerator_default","a","wrap","_context","prev","next","target","length","abrupt","_this","props","sent","stop","this","react_default","createElement","id","onDrop","React","Component","sortFields","field","title","SortPanel","renderItem","s","ix","selectedSort","cls","push","key","className","join","onClick","bind","Object","assertThisInitialized","sortItem","map","Item","_this$props","item","children","_this$props2","selected","_item","name","age","itemClass","hlp","listToTree","list","items","filter","it","parentId","sortIx","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","value","level","fillChildren","err","return","ch","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getColumns","tree","selectedIds","columns","selectedItem","find","some","si","sortTree","sort","b","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","saveUrlState","state","stringify","window","location","hash","getUrlState","decodeURIComponent","substring","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","renderColumn","column","src_Item","itemClick","_this$state","findIndex","splice","setState","onSortChange","_this$state2","toConsumableArray","onChangeData","urlState","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_this$state3","src_DragDrop","src_SortPanel","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.975ae00a.chunk.js","sourcesContent":["import React from 'react';\n\nclass DragDrop extends React.Component {\n    render() {\n        return (\n            <div id=\"drop_zone\" onDragOver={this.onDragOver} onDrop={this.onChange}>Drop json file here</div>\n        )\n    }\n\n    onDragOver = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        e.dataTransfer.dropEffect = 'copy';\n    }\n\n    onChange = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        let files = e.dataTransfer.files || e.target.files;\n        let file = files.length ? files[0] : null;\n        if (!file) return;\n\n        const { onChange } = this.props;\n        if (onChange) {\n            let json = await loadJsonFile(file);\n            onChange(json);\n        }    \n    }\n}\n\nfunction loadJsonFile(file) {\n    return new Promise((resolve) => {\n        let reader = new FileReader();\n        reader.onload = () => {\n            let json = null;\n\n            if (reader.result) {\n                try { json = JSON.parse(reader.result); }\n                catch (ignore) { }\n            }\n\n            resolve(json);\n        };\n        reader.readAsText(file);\n    })\n}\n\nexport default DragDrop;","import React from 'react';\n\nconst sortFields = [\n    { field: 'name', title: 'By name' },\n    { field: 'age', title: 'By age' },\n]\n\nclass SortPanel extends React.Component {\n    renderItem = (s, ix) => {\n        let { selectedSort } = this.props;\n\n        let cls = ['sort-btn'];\n        if (selectedSort && selectedSort.field === s.field) {\n            cls.push('selected');\n        }\n\n        return (\n            <div\n                key={ix}\n                className={cls.join(' ')}\n                onClick={this.onClick.bind(this, s)}\n            >{s.title}</div>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"sort-panel\">\n                <div className=\"lbl sort-lbl\">Sort</div>\n                {sortFields.map(this.renderItem)}\n            </div>\n        )\n    }\n\n    onClick = (sortItem) => {\n        let { onChange } = this.props;\n        if (onChange) { onChange(sortItem); }\n    }\n}\n\nexport default SortPanel;","import React from 'react';\n\nclass Item extends React.Component {\n    render() {\n        let { item, selected } = this.props;\n        item = item || {};\n        const { name, age, children } = item;\n\n        let itemClass = ['item'];\n        if (selected) {\n            itemClass.push('selected');\n        }\n        if (children && children.length) {\n            itemClass.push('has-children');\n        }\n\n        return (\n            <div className={itemClass.join(' ')} onClick={this.onClick}>\n                <div className=\"item-name\">{name}</div>\n                <div className=\"item-age\">{age}</div>\n            </div>\n        )\n    }\n\n    onClick = (e) => {\n        let { onClick, item } = this.props;\n        if (onClick && item.children.length) {\n            onClick(item);\n        }\n    }\n}\n\nexport default Item;","const hlp = {\n    listToTree(list) {\n        let items = list.filter(it => it.parentId === null);\n\n        let sortIx = 0;\n        //fill children\n        for (const it of items) {\n            //set root level\n            it.level = 0;\n            //default sort ix\n            it.sortIx = sortIx;\n            sortIx++;\n            hlp.fillChildren(list, it);\n        }\n\n        return items;\n    },\n\n    fillChildren(list, it) {\n        it.children = list.filter(ch => ch.parentId === it.id);\n        let sortIx = 0;\n        for (const ch of it.children) {\n            //set children level\n            ch.level = it.level + 1;\n            //default sort ix\n            ch.sortIx = sortIx;\n            sortIx++;\n            hlp.fillChildren(list, ch);\n        }\n    },\n\n    getColumns(tree, selectedIds) {\n        let columns = [];\n\n        //copy root\n        columns.push({\n            name: 'Root',\n            items: tree\n        });\n\n        let selectedItem = tree.find(it => selectedIds.some(si => si.id === it.id));\n\n        //if selected - go next\n        while (selectedItem) {\n            let items = selectedItem.children;\n            columns.push({\n                name: selectedItem.name,\n                items: items\n            });\n\n            //next\n            selectedItem = items.find(it => selectedIds.some(si => si.id === it.id));\n        }\n\n        return columns;\n    },\n\n    sortTree(field, item) {\n        item.children.sort((a, b) => {\n            if (a[field] < b[field]) return -1;\n            if (a[field] > b[field]) return 1;\n            return 0;\n        });\n        for (const ch of item.children) {\n            hlp.sortTree(field, ch);\n        }\n    },\n\n    saveUrlState(state) {\n        let json = JSON.stringify(state);\n        window.location.hash = json;\n    },\n\n    getUrlState() {\n        let state;\n        try {\n            let hash = decodeURIComponent(window.location.hash);\n            hash = hash.substring(1);//remove #\n            state = JSON.parse(hash);\n        }\n        catch (ignore) { }\n        return state;\n    }\n}\n\nexport default hlp;","import React, { Component } from 'react';\nimport './App.css';\nimport DragDrop from './DragDrop';\nimport SortPanel from './SortPanel';\nimport Item from './Item';\n\nimport file from './data/sample.json';\nimport hlp from './helper';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        //restore url state\n        let urlState = hlp.getUrlState() || {};\n        let { selectedIds, selectedSort } = urlState;\n        selectedIds = selectedIds || [];\n\n        const list = file || [];\n        const tree = hlp.listToTree(list);\n\n        //if sort set - sort\n        if (selectedSort) {\n            for (const it of tree) {\n                hlp.sortTree(selectedSort.field, it);\n            }\n        }        \n\n        this.state = {\n            tree: tree,\n            list: list,\n            columns: hlp.getColumns(tree, selectedIds),\n            selectedIds: selectedIds,\n            selectedSort: selectedSort\n        }\n    }\n\n    renderColumn = (column, ix) => {\n        let { selectedIds } = this.state;\n        let { name, items } = column;\n\n        return (\n            <div key={ix} className=\"tree-column\">\n                <div className=\"lbl column-lbl\">\n                    {name}\n                </div>\n\n                {items.map(it => <Item\n                    key={it.id}\n                    item={it}\n                    selected={selectedIds.some(si => si.id === it.id)}\n                    onClick={this.itemClick}\n                />)}\n            </div>\n        )\n    }\n\n    itemClick = (item) => {\n        let { selectedIds, tree, selectedSort } = this.state;\n\n        //toggle\n        let ix = selectedIds.findIndex(it => it.id === item.id);\n        if (ix !== -1) {\n            selectedIds.splice(ix, 1);\n        } else {\n            selectedIds.push({ id: item.id, level: item.level });\n\n            //leave selected current item and his parents\n            selectedIds = selectedIds.filter(si => si.id === item.id || (si.id !== item.id && si.level < item.level));\n        }\n\n        //update url\n        hlp.saveUrlState({ selectedIds, selectedSort });\n\n        let columns = hlp.getColumns(tree, selectedIds);\n        this.setState({ selectedIds: selectedIds, columns: columns });\n    }\n\n    render() {\n        let { columns, selectedSort } = this.state;\n\n        return (\n            <div className=\"App\">\n                <DragDrop onChange={this.onChangeData} />\n                <SortPanel selectedSort={selectedSort} onChange={this.onSortChange} />\n\n                <div className=\"tree-container\">\n                    {columns.map(this.renderColumn)}\n                </div>\n            </div>\n        );\n    }\n\n    onSortChange = (sortItem) => {\n        let { selectedSort, tree, selectedIds } = this.state;\n\n        //toggle\n        if (selectedSort && selectedSort.field === sortItem.field) {\n            sortItem = null;\n        }\n\n        if (sortItem) {\n            for (const it of tree) {\n                hlp.sortTree(sortItem.field, it);\n            }\n        } else {\n            //default sort\n            for (const it of tree) {\n                hlp.sortTree('sortIx', it);\n            }\n        }\n\n        //update url\n        hlp.saveUrlState({ selectedIds, selectedSort: sortItem });\n\n        this.setState({ selectedSort: sortItem, tree: [...tree] });\n    }\n\n    onChangeData = (list) => {\n        let { selectedSort } = this.state;\n\n        if (list) {\n            //reset\n            const tree = hlp.listToTree(list);\n            const selectedIds = [];\n            let columns = hlp.getColumns(tree, selectedIds);\n\n            //if sort set - sort\n            if (selectedSort) {\n                for (const it of tree) {\n                    hlp.sortTree(selectedSort.field, it);\n                }\n            }\n\n            //update url, reset selected\n            hlp.saveUrlState({ selectedIds: [], selectedSort: selectedSort });\n            \n            this.setState({ list: list, tree: tree, selectedIds: selectedIds, columns: columns });\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}